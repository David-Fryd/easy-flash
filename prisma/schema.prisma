// Prisma schema docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

/// A sector is a piece of airspace that is controlled by a single controller.
/// Sectors are defined by an altitude range and coordinates detailing their boundaries
/// Both the altitude range and coordinates are defined in the <fir>Sectors.geojson file
/// Sectors stored in the database are used to 
///  a) Parse the <fir>Sectors.geojson file
///       - If a sectorID used in the .geojson file is not in the DB, 
///         it will be ignored during processing and visualization.
///       - Sectors defined in the DB indicate which sectors
///         should be displayed on the map and group-able by controllers.
///  b) Store additional metadata about a sector (label, notes, etc.)
model Sector {
  /// Arbitrary unique ID corresponding to a given Sector (id in DB)
  /// Important because the sectorID is not unique across FIRs
  uniqueID    Int    @id @default(autoincrement())
  /// The sector's ID. "Unique" identifier within an FIR (usually numeric in VATUSA)
  /// This is the property that associates a sector in the DB w a sector in the provided <fir>Sectors.geojson
  /// "46", "23", "10", "TPA", ...
  sectorID    String
  /// The sector's name, as it should appear on the map
  /// "46 ALUTO", "ALUTO", "46", ...
  sectorLabel String

  /// Notes or remarks about a given sector
  notes String

  /// The name of the FIR the Sector belongs to
  /// "ZMA", "ZJX", ...
  firName String 
  /// The FIR the Sector belongs to
  fir     FIR    @relation("FIRtoSectors", fields: [firName], references: [firName], onDelete: Cascade)

  @@index([firName])
}

// model Group {

// }
/// Flight Information Region
model FIR {
  id                        Int      @id @default(autoincrement())
  firName                   String   @unique // "ZMA"
  firLabel                  String   // "Miami ARTCC"
  sectorFileName            String // "zmaSectors.geojson"
  subtractiveSectorFileName String // "zmaSubtractiveSectors.geojson"
  sectors                   Sector[] @relation("FIRtoSectors")
}

// model Example {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Manually added for quick indexing (prisma's recommendation)
  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
