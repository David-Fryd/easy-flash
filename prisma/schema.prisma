// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//     provider = "prisma-client-js"
// }

// datasource db {
//     provider = "sqlite"
//     // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
//     // Further reading:
//     // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
//     // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
//     url      = env("DATABASE_URL")
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

/// A Volume is a basic 3D shape that defines the geometry of a piece of airspace
/// Sectors are comprised of one or more Volumes
model Volume {
  // Arbitrary unique ID corresponding to a given volume
  id Int @id @default(autoincrement())

  /// The GeoJSON representation of the volume
  FeatureCollection Json @default("{}")

  /// The lower altitude of the volume (in FL, hundreds of feet)
  altitudeMin Int
  /// The upper altitude of the volume (in FL, hundreds of feet)
  altitudeMax Int

  /// Notes or remarks about a given volume
  notes String

  /// The arbitrary unique ID of the sector the volume belongs to
  sectorUniqueID Int
  /// The sector the volume belongs to
  sector         Sector @relation(fields: [sectorUniqueID], references: [uniqueID], onDelete: Cascade)

  @@index([sectorUniqueID])
}

/// A sector is a piece of airspace that is controlled by a single controller
/// A sector is comprised of one or more volumes that define the geometry of the airspace
model Sector {
  /// Arbitrary unique ID corresponding to a given Sector 
  /// Important because the sectorID is not unique across FIRs
  uniqueID    Int    @id @default(autoincrement())
  /// The sector's ID (unique numeric identifier within an FIR)
  /// 46, 23, 10, ...
  sectorID    Int
  /// The sector's name, as it should appear on the map
  /// "46 ALUTO", "ALUTO", "46", ...
  sectorLabel String

  /// The volumes that define the geometry of the sector
  volumes Volume[]

  /// The name of the FIR the Sector belongs to
  /// "ZMA", "ZJX", ...
  firName String
  /// The FIR the Sector belongs to
  fir     FIR    @relation("FIRtoSectors", fields: [firName], references: [firName], onDelete: Cascade)

  @@index([firName])
}

model FIR {
  id      Int      @id @default(autoincrement())
  firName String   @unique // "ZMA"
  sectors Sector[] @relation("FIRtoSectors")
}

// model Example {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// // Necessary for Next auth
// model Account {
//     id                String  @id @default(cuid())
//     userId            String
//     type              String
//     provider          String
//     providerAccountId String
//     refresh_token     String?  @db.Text
//     access_token      String?  @db.Text
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String?  @db.Text
//     session_state     String?
//     user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([provider, providerAccountId])
//     @@index([userId])
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//     id            String    @id @default(cuid())
//     name          String?
//     email         String?   @unique
//     emailVerified DateTime?
//     image         String?
//     accounts      Account[]
//     sessions      Session[]
// }

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }
